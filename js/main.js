"use strict";

(function () {
  var fieldImages = document.querySelectorAll(".list__image");
  var contentImagePreview = document.createElement("div");
  contentImagePreview.classList.add("preview");
  var contentImagePreviewItem = document.createElement("img");

  if (!fieldImages.length) {
    return;
  }

  function onMouseOver(event) {
    var mouseX = event.pageX;
    var mouseY = event.pageY;
    var crd = event.target.getBoundingClientRect();
    var activePointer = crd.left <= mouseX && mouseX <= crd.right && crd.top <= mouseY && mouseY <= crd.bottom;
    requestAnimationFrame(function movePointer() {
      if (activePointer) {
        document.querySelector(".wrapper").insertAdjacentElement("afterbegin", contentImagePreview);
        contentImagePreview.insertAdjacentElement("afterbegin", contentImagePreviewItem);
        contentImagePreviewItem.setAttribute("src", event.target.getAttribute("src"));
        contentImagePreview.style.left = Math.floor(mouseX) + 10 + 'px';
        contentImagePreview.style.top = Math.floor(mouseY) - 10 + 'px';
      } else {
        contentImagePreview.remove();
      }
    });
  }

  function disablePointer() {
    requestAnimationFrame(function hidePointer() {
      contentImagePreview.remove();
    });
  }

  function onMouseClick(param) {}

  for (var index = 0; index < fieldImages.length; index++) {
    var image = fieldImages[index];

    if (document.documentElement.clientWidth > 1440) {
      image.addEventListener('mouseenter', onMouseOver, false);
      image.addEventListener('mouseleave', disablePointer, false);
    }
  }

  window.addEventListener("resize", function (event) {
    for (var _index = 0; _index < fieldImages.length; _index++) {
      var _image = fieldImages[_index];

      if (document.documentElement.clientWidth < 1441) {
        _image.removeEventListener('mouseenter', onMouseOver, false);

        _image.removeEventListener('mouseleave', disablePointer, false);
      } else {
        _image.addEventListener('mouseenter', onMouseOver, false);

        _image.addEventListener('mouseleave', disablePointer, false);
      }
    }
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZmllbGRJbWFnZXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjb250ZW50SW1hZ2VQcmV2aWV3IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImNvbnRlbnRJbWFnZVByZXZpZXdJdGVtIiwibGVuZ3RoIiwib25Nb3VzZU92ZXIiLCJldmVudCIsIm1vdXNlWCIsInBhZ2VYIiwibW91c2VZIiwicGFnZVkiLCJjcmQiLCJ0YXJnZXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhY3RpdmVQb2ludGVyIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW92ZVBvaW50ZXIiLCJxdWVyeVNlbGVjdG9yIiwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwic3R5bGUiLCJNYXRoIiwiZmxvb3IiLCJyZW1vdmUiLCJkaXNhYmxlUG9pbnRlciIsImhpZGVQb2ludGVyIiwib25Nb3VzZUNsaWNrIiwicGFyYW0iLCJpbmRleCIsImltYWdlIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJhZGRFdmVudExpc3RlbmVyIiwid2luZG93IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsQ0FBQyxZQUFVO0FBQ1AsTUFBTUEsV0FBVyxHQUFHQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGNBQTFCLENBQXBCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUdGLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixLQUF2QixDQUE1QjtBQUNNRCxFQUFBQSxtQkFBbUIsQ0FBQ0UsU0FBcEIsQ0FBOEJDLEdBQTlCLENBQWtDLFNBQWxDO0FBQ04sTUFBTUMsdUJBQXVCLEdBQUdOLFFBQVEsQ0FBQ0csYUFBVCxDQUF1QixLQUF2QixDQUFoQzs7QUFFQSxNQUFJLENBQUNKLFdBQVcsQ0FB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SyxDQUFDSyxtQkFBTixDQUEwQixZQUExQixFQUF3Q1YsY0FBeEMsRUFBd0QsS0FBeEQ7QUFDSCxPQUhELE1BR087QUFDSEssUUFBQUEsTUFBSyxDQUFDRyxnQkFBTixDQUF1QixZQUF2QixFQUFxQ2hDLFdBQXJDLEVBQWtELEtBQWxEOztBQUNBNkIsUUFBQUEsTUFBSyxDQUFDRyxnQkFBTixDQUF1QixZQUF2QixFQUFxQ1IsY0FBckMsRUFBcUQsS0FBckQ7QUFDSDtBQUNKO0FBQ0osR0FYRDtBQWFILENBMUREIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4oZnVuY3Rpb24oKXtcclxuICAgIGNvbnN0IGZpZWxkSW1hZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5saXN0X19pbWFnZVwiKTtcclxuICAgIGNvbnN0IGNvbnRlbnRJbWFnZVByZXZpZXcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgY29udGVudEltYWdlUHJldmlldy5jbGFzc0xpc3QuYWRkKFwicHJldmlld1wiKTtcclxuICAgIGNvbnN0IGNvbnRlbnRJbWFnZVByZXZpZXdJdGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuXHJcbiAgICBpZiAoIWZpZWxkSW1hZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZnVuY3Rpb24gb25Nb3VzZU92ZXIoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBtb3VzZVggPSBldmVudC5wYWdlWDtcclxuICAgICAgICBjb25zdCBtb3VzZVkgPSBldmVudC5wYWdlWTsgICAgICAgICAgICBcclxuICAgICAgICBjb25zdCBjcmQgPSBldmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlUG9pbnRlciA9IGNyZC5sZWZ0IDw9IG1vdXNlWCAmJiBtb3VzZVggPD0gY3JkLnJpZ2h0ICYmIGNyZC50b3AgPD0gbW91c2VZICYmIG1vdXNlWSA8PSBjcmQuYm90dG9tO1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBtb3ZlUG9pbnRlcigpIHtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZVBvaW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3JhcHBlclwiKS5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGNvbnRlbnRJbWFnZVByZXZpZXcpO1xyXG4gICAgICAgICAgICAgICAgY29udGVudEltYWdlUHJldmlldy5pbnNlcnRBZGphY2VudEVsZW1lbnQoXCJhZnRlcmJlZ2luXCIsIGNvbnRlbnRJbWFnZVByZXZpZXdJdGVtKTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJbWFnZVByZXZpZXdJdGVtLnNldEF0dHJpYnV0ZShcInNyY1wiLCBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwic3JjXCIpKTtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJbWFnZVByZXZpZXcuc3R5bGUubGVmdCA9IE1hdGguZmxvb3IobW91c2VYKSArIDEwICsgJ3B4JztcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRJbWFnZVByZXZpZXcuc3R5bGUudG9wID0gTWF0aC5mbG9vcihtb3VzZVkpIC0gMTAgKyAncHgnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29udGVudEltYWdlUHJldmlldy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBkaXNhYmxlUG9pbnRlcigpIHtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gaGlkZVBvaW50ZXIoKSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnRJbWFnZVByZXZpZXcucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gb25Nb3VzZUNsaWNrIChwYXJhbSkgeyAgfVxyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgZmllbGRJbWFnZXMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBmaWVsZEltYWdlc1tpbmRleF07XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA+IDE0NDApIHtcclxuICAgICAgICAgICAgaW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9uTW91c2VPdmVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBkaXNhYmxlUG9pbnRlciwgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBldmVudCA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGZpZWxkSW1hZ2VzLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IGZpZWxkSW1hZ2VzW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8IDE0NDEpIHtcclxuICAgICAgICAgICAgICAgIGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBvbk1vdXNlT3ZlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGRpc2FibGVQb2ludGVyLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25Nb3VzZU92ZXIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBkaXNhYmxlUG9pbnRlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuXHJcbn0pKCk7XHJcbiJdLCJmaWxlIjoibWFpbi5qcyJ9